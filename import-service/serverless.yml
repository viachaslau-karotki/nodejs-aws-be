service: import-service
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: 'Allow'
      Action: 's3:listBucket'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ImportS3Bucket
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ImportS3Bucket
            - '/*'
    - Effect: 'Allow'
      Action: 's3:PutBucketNotification'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ImportS3Bucket
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        Ref: SNSImportProductTopic
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
  environment:
    PG_HOST: 
    PG_PORT: 
    PG_DATABASE: 
    PG_USERNAME: 
    PG_PASSWORD:   
    bucketName: rc-import-service-bucket
    SQS_URL:
      Ref: SQSQueue
    SNS_URL:
      Ref: SNSImportProductTopic

resources:
  Resources:
    ## Specifying the S3 Bucket
    ImportS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.bucketName}
        AccessControl: PublicRead
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
              - "PUT"
              AllowedOrigins: 
              - "*"
              AllowedHeaders:
              - "*"
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: import-product-queue
    SNSImportProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: import-products-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: karotkiv@gmail.com
        Protocol: Email
        TopicArn:
          Ref: SNSImportProductTopic

functions:
  importProductsFile:
    handler: importProductsFile.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: "arn:aws:lambda:eu-central-1:761833635337:function:authorization-service-dev-basicAuthorizer"
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: importFileParser.importFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: "uploaded/"
          existing: true
  catalogBatchProcess:
    handler: catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
      
  